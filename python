1. Libraries
- NumPy: Numerical operations
- Pandas: Data manipulation and analysis
- Matplotlib: Plotting and visualization
- Seaborn: Statistical data visualization
- SciPy: Scientific computing(J.A>O)
- Scikit-learn: Machine learning (j.a.o)
2. NumPy
```python
import numpy as np
# Creating arrays
arr = np.array([1, 2, 3])
matrix = np.array([[1, 2], [3, 4]])
# Array operations
np.sum(arr)
np.mean(arr)
np.std(arr)
np.dot(matrix, matrix) # Matrix multiplication
```
3. Pandas
```python
import pandas as pd
# Creating DataFrame
data = {'Column1': [1, 2], 'Column2': [3, 4]}
df = pd.DataFrame(data)
# Basic operations
df.head() # First 5 rows
df.describe() # Summary statistics
df['Column1'] # Select a column
df.iloc[0] # Select a row
df[df['Column1'] > 1] # Filtering
# Handling missing data
df.dropna() # Remove missing values
df.fillna(value=0) # Fill missing values
```
4. Matplotlib
```python
import matplotlib.pyplot as plt
# Basic plot
plt.plot([1, 2, 3], [4, 5, 6])
plt.title('Title')
plt.xlabel('X Axis')
plt.ylabel('Y Axis')
plt.show()
# Histogram
plt.hist([1, 2, 2, 3, 4])
plt.show()
```
5. Seaborn
```python
import seaborn as sns
# Basic plot
sns.set(style="darkgrid")
sns.lineplot(x=[1, 2, 3], y=[4, 5, 6])
# Scatter plot with regression line
sns.regplot(x=[1, 2, 3], y=[4, 5, 6])
# Box plot
sns.boxplot(x=['A', 'B', 'C'], y=[4, 5, 6])
```
6. SciPy
```python
from scipy import stats
# Statistical functions
stats.ttest_ind([1, 2, 3], [4, 5, 6]) # T-test
stats.pearsonr([1, 2, 3], [4, 5, 6]) # Pearson correlation
```
7. Scikit-learn
```python
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
# Sample data
X = [[1], [2], [3]]
y = [1, 2, 3]
# Splitting data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
# Creating and training model
model = LinearRegression()
model.fit(X_train, y_train)
# Predictions
predictions = model.predict(X_test)
# Evaluating model
mse = mean_squared_error(y_test, predictions)
```
8. Data Preprocessing
```python
from sklearn.preprocessing import StandardScaler
# Standardization
scaler = StandardScaler()
scaled_data = scaler.fit_transform([[1, 2], [3, 4]])
# Encoding categorical variables
from sklearn.preprocessing import OneHotEncoder
encoder = OneHotEncoder()
encoded_data = encoder.fit_transform([['A'], ['B'], ['C']]).toarray()
```
